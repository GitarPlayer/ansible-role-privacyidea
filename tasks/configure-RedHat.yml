---
- name: Ensure directories exist
  ansible.builtin.file:
    state: directory
    path: "{{ item }}"
    mode: 0750
  loop: 
    - "{{ pi_venv_path }}"
    - "{{ pi_conf_path }}"
    - "{{ pi_log_path }}"
- name: Ensure user {{ pi_linux_user }}
  ansible.builtin.user:
    name: "{{ pi_linux_user }}"
    home: "{{ pi_venv_path }}"
    system: yes
- name: Ensure group ownership of {{ websrv_user }} 
  ansible.builtin.user:
    name: "{{ websrv_user }}"
    groups: "{{ pi_linux_user }}"
    append: yes
- name: Ensure permission and ownership of directories
  ansible.builtin.file:
    state: directory
    owner: "{{ pi_linux_user }}"
    group: "{{ pi_linux_user }}"
    path: "{{ item }}"
    mode: 0750
  loop:
    - "{{ pi_venv_path }}"
    - "{{ pi_conf_path }}"
    - "{{ pi_log_path }}"
- name: Template privacyideaapp.wsgi to {{ pi_conf_path }}
  ansible.builtin.template:
    src: privacyideaapp.wsgi.j2
    dest: "{{ pi_conf_path }}/privacyideaapp.wsgi"
    mode: 0750
    owner: "{{ pi_linux_user }}"
    group: "{{ pi_linux_user }}"
- name: Check if requirements.txt exists already
  ansible.builtin.stat:
    path: "{{ pi_venv_path }}/requirements.txt"
  register: requirements_stat
  ignore_errors: yes
- name: Get requirements.txt for {{ pi_version }}
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/privacyidea/privacyidea/v{{ pi_version }}/requirements.txt
    dest: "{{ pi_venv_path }}/requirements.txt"
    mode: 0640
    owner: "{{ pi_linux_user }}"
    group: "{{ pi_linux_user }}"
  when: not requirements_stat.stat.exists
- name: Ensure {{ python_package_name }}
  ansible.builtin.yum:
    name: "@{{ python_package_name }}"
    state: present
- name: Install pexpect for expect module and mod_wsgi matching {{ python_package_name }}
  ansible.builtin.yum:
    name: 
      - python3-pexpect 
      - "{{ python_package_name }}-mod_wsgi"
    state: present
- name: Install privacyIDEA requirements in {{ pi_venv_path }}
  become_user: "{{ pi_linux_user }}"
  ansible.builtin.pip:
    requirements: "{{ pi_venv_path }}/requirements.txt"
    virtualenv: "{{ pi_venv_path }}"
    virtualenv_command: '{{ python_binary_name }} -m venv'
- name: Install privacyidea=={{ pi_version }}
  become_user: "{{ pi_linux_user }}"
  ansible.builtin.pip:
    name: privacyidea=={{ pi_version }}
    virtualenv: "{{ pi_venv_path }}"
    virtualenv_command: '{{ python_binary_name }} -m venv'
- name: Create enckey
  become_user: "{{ pi_linux_user }}"
  ansible.builtin.command: "{{ pi_venv_path }}/bin/pi-manage create_enckey"
  args: 
    creates: "{{ pi_venv_path }}/lib64/{{ python_binary_name }}/site-packages/enckey"
- name: Create audit_keys
  become_user: "{{ pi_linux_user }}"
  ansible.builtin.command: "{{ pi_venv_path }}/bin/pi-manage create_audit_keys"
  args:
    creates: "{{ pi_venv_path }}/lib64/{{ python_binary_name }}/site-packages/public.pem"
- name: Setfact for pi_encfile, pi_audit_key_private, pi_audit_key_public
  ansible.builtin.set_fact:
    pi_encfile: "{{ pi_venv_path }}/lib64/{{ python_binary_name }}/site-packages/enckey"
    pi_audit_key_private: "{{ pi_venv_path }}/lib64/{{ python_binary_name }}/site-packages/private.pem"
    pi_audit_key_public: "{{ pi_venv_path }}/lib64/{{ python_binary_name }}/site-packages/public.pem"
- name: Template pi.cfg
  ansible.builtin.template:
    src: pi.cfg.j2
    dest: "{{ pi_conf_path }}/pi.cfg"
    mode: 0640
    owner: "{{ pi_linux_user }}"
    group: "{{ pi_linux_user }}"
- name: Create the database structure
  become_user: "{{ pi_linux_user }}"
  ansible.builtin.command: "{{ pi_venv_path }}/bin/pi-manage createdb"
  args:
    creates: "{{ pi_venv_path }}/lib/privacyidea/migrations/versions"
- name: Stamp the db
  become_user: "{{ pi_linux_user }}"
  ansible.builtin.command: "{{ pi_venv_path }}/bin/pi-manage db stamp head -d {{ pi_venv_path }}/lib/privacyidea/migrations/"
  args:
    creates: "{{ pi_venv_path }}/lib/privacyidea/migrations/versions"
- name: Check if admin account already exists
  become_user: "{{ pi_linux_user }}"
  ansible.builtin.command: "{{ pi_venv_path }}/bin/pi-manage admin list"
  ignore_errors: yes
  changed_when: false
  register: pi_manage_list_command
- name: Setup admin account
  become_user: "{{ pi_linux_user }}"
  ansible.builtin.expect:
    command: "{{ pi_venv_path }}/bin/pi-manage admin add {{ pi_admin }}"
    responses:
      Password: "{{ pi_admin_pass }}"
      Confirm: "{{ pi_admin_pass }}"
  when: pi_admin not in pi_manage_list_command.stdout 
